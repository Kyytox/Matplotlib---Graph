# Share Hashrate / Country 
# Share of Global Hashrate (EH/S) at 2022-01-01
# Estimated Hashrate (EH/S) by Country at 2022-01-01
# https://ccaf.io/cbeci/mining_map
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

backColor = '#001219'
backGraphColor = '#ADB5BD'
explode = (0,0,0,0.05,0.1,0.13,0.17,0.22,0.28,0.45)

df = pd.read_csv('dataShareHashrateCountry.csv')
# delete caract % in column monthly_hashrate_%
df['monthly_hashrate_%'] = df['monthly_hashrate_%'].map(lambda x: x.lstrip('+-').rstrip('%'))
df['country'] = df['country'].map(lambda x: x.lstrip('+-').rstrip('*'))
# print(type(df['monthly_hashrate_%'][0]))
# print(df[-10::].to_string()) 
colors=['#4cc9f0','#4895ef', '#4361ee', '#3f37c9', '#3a0ca3', '#560bad', '#b5179e', '#f72585', '#ff0054', '#EDEDBF']

# Graph Pie
fig, ax = plt.subplots(figsize=(11, 11))
fig.patch.set_facecolor(backColor)
plt.pie(df['monthly_hashrate_%'][-10::],
        labels = df['country'][-10::],
        autopct = '%1.1f%%',
        shadow = True,
        colors=colors,
        explode=explode,
        wedgeprops = {'linewidth': 0.7, 'edgecolor': "w", "width":0.28},
        pctdistance=0.63, labeldistance=1.05,
        textprops = dict(color ="w", fontsize='11.5',fontweight ='bold'))
plt.title('Share of Global Hashrate (EH/S) at 2022-01-01', loc ='center',fontweight='bold', fontsize='16', color='w')
lg = ax.legend(df['country'][-10::], title ="Country", loc ="upper left", bbox_to_anchor =(1, 0, 1, 1), shadow=True)
lg.get_frame().set_facecolor('#adb5bd')
lg.get_texts()
plt.show() 

#Graph Bar 
fig, ax = plt.subplots(figsize=(16, 7))
fig.patch.set_facecolor(backColor)
plt.bar(df['country'][-10::], df['monthly_absolute_hashrate_EH/S'][-10::], width = 0.65, color=colors)
plt.title('Absolute Hashrate (EH/S) by Country at 2022-01-01', loc ='center',fontweight='bold', fontsize='16', color='w')
plt.xlabel('Country', fontweight='bold', color = 'w', fontsize='14', horizontalalignment='center',  labelpad=1)
plt.ylabel('Estimated Hashrate (EH/S)', fontweight='bold', color = 'w', fontsize='14', horizontalalignment='center')
plt.xticks(rotation=30)
ax.grid(axis = 'y', color='grey');
ax.tick_params(colors='w', labelsize=12)
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)
ax.spines["left"].set_visible(False)
ax.set_facecolor(backColor)
ax.tick_params(axis = 'x', direction='out', length=15, width=1, colors='w', grid_color='w', grid_alpha=0.5)
ax.xaxis.set_label_coords(.5, -0.26)
ax.yaxis.set_label_coords(-0.05, 0.5)
# Add annotation to bars
for bar in ax.patches:
    ax.annotate(format(bar.get_height(), '.2f'),
                (bar.get_x() + bar.get_width() / 2,
                bar.get_height()),
                ha='center',
                va='center',
                size=12,
                xytext=(0, 10),
                textcoords='offset points',
                color='orange',
                fontweight='bold')
plt.show() 
